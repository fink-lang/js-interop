
{describe, it, expect, to_equal} = import '@fink/jest/test.fnk'

{_in_} = import './runtime.js'
{_sort_, _reverse_, _join_, _zip_} = import './runtime.js'
{_iter_, _next_, _is_empty_, _iterable_,  _len_} = import './runtime.js'

{new} = import './reflect.js'
{Set, Map, Symbol} = import './globals.js'
{null, undefined} = import './nullish.js'


js_iter = fn obj:
  obj.(Symbol.iterator) _


expect_iter = fn actual, expectation:
  expect
    [... _iter_ actual]
    expectation



describe _zip_, fn:
  it 'zips iterables into one', fn:
    count = fn start:
      _iterable_ fn:
        [start + 1, count start + 1]

    items = _zip_ 'abc', count 0

    expect_iter
      items
      to_equal list:
        ['a', 1]
        ['b', 2]
        ['c', 3]



describe _reverse_, fn:
  it 'reverses iteralbe', fn:
    items = [1, 2, 3, 4, 5]
    expect_iter
      _reverse_ items
      to_equal
        [5, 4, 3, 2, 1]

    expect_iter
      items
      to_equal
        [1, 2, 3, 4, 5]



describe _sort_, fn:
  it 'sorts', fn:
    decending = fn a, b:
      match  a:
        b: 0
        ? < b: 1
        else: -1

    expect_iter
      [1, 3, 2, 8, 4] | _sort_ _
      to_equal
        [1, 2, 3, 4, 8]

    expect_iter
      [1, 3, 2, 8, 4] | _sort_ decending
      to_equal
        [8, 4, 3, 2, 1]



describe _len_, fn:
  it 'gets lengths', fn:
    expect
      _len_ []
      to_equal 0

    [, tail] = _next_ _iter_ [1, 2, 3]
    expect
      _len_ tail
      to_equal 2

    expect
      _len_ 'foo'
      to_equal 3

    expect
      _len_ {foo: 'bar'}
      to_equal 1

    [, it] = _next_ _iter_ []
    expect
      _len_ it
      to_equal 0


  it 'gets lengths for JS native', fn:
    expect
      _len_ new Set, [1, 2, 3]
      to_equal 3

    expect
      _len_ new Map, [['foo', 'bar']]
      to_equal 1

    expect
      _len_ js_iter [1, 2, 3]
      to_equal 3



describe _is_empty_, fn:
  it 'checks if empty', fn:
    expect
      _is_empty_ []
      to_equal true

    [, tail] = _next_ _iter_ [1, 2, 3]

    expect
      _is_empty_ tail
      to_equal false

    expect
      _is_empty_ 'foo'
      to_equal false

    expect
      _is_empty_ {foo: 'bar'}
      to_equal false

    [, it] = _next_ _iter_ []
    expect
      _is_empty_ it
      to_equal true

    [, empt] = _next_ it
    expect
      _is_empty_ empt
      to_equal true


  it 'checks JS native', fn:
    expect
      _is_empty_ new Set, [1, 2, 3]
      to_equal false

    expect
      _is_empty_ new Map, [['foo', 'bar']]
      to_equal false

    expect
      _is_empty_ js_iter [1, 2, 3]
      to_equal false



describe _iter_ , fn:
  it 'gets first item and tail iterator', fn:
    [head, tail] = _next_ _iter_ [1, 2, 3]

    expect
      head
      to_equal 1

    expect_iter
      tail
      to_equal [2, 3]


  it 'gets empty tail', fn:
    [, tail] = _next_ _iter_ []
    expect_iter
      tail
      to_equal []



describe 'other iterables', fn:
  it 'returns empty for non-interables', fn:
    expect_iter
      1234
      to_equal []

    expect_iter
      null
      to_equal []

    expect_iter
      undefined
      to_equal []


  it 'returns key value pairs for records', fn:
    expect_iter
      {foo: 'bar', ni: 42}
      to_equal list:
        ['foo', 'bar']
        ['ni', 42]


  it 'iterates over JS native iterables', fn:
    expect_iter
      new Set, [1, 2, 3]
      to_equal
        [1, 2, 3]

    expect_iter
      new Map, [['foo', 12], ['bar', 42]]
      to_equal
        [['foo', 12], ['bar', 42]]


# TODO
# describe 'JS async iterable', fn:
#   it 'provides async iterable', fn:
#     [await item1, item2] = '1234' | filter await item: item != '1'
#     expect
#       [item1, item2]
#       to_equal ['2', '3']


#   it 'exhausts async iterable', fn:
#     [await item] = '1234' | filter await item: item == '0'
#     expect
#       item
#       to_equal undefined



describe _join_, fn:
  it 'joins items', fn:
    expect
      pipe 'abcd':
        _iter_
        _join_ ','

      to_equal
        'a,b,c,d'



describe _in_, fn:
  it 'checks items in array', fn:
    expect
      'foo' in ['bar', 'spam', 'ham', 'ni', 'foo']
      to_equal
        true


  it 'checks items in string', fn:
    expect
      'foo' in '_foo_'
      to_equal
        true


  it 'checks in iterables', fn:
    expect
      2 in _iter_ [1, 2, 3]
      to_equal
        true

    expect
      5 in _iter_ [1, 2, 3]
      to_equal
        false


  it 'checks empty iter', fn:
    [, it] = _next_ _iter_ []
    expect
      2 in it
      to_equal
        false


  it 'checks record keys', fn:
    expect
      'foo' in {foo: 'bar'}
      to_equal
        true

    expect
      'foo' in new Map, [['foo', 'bar']]
      to_equal
        true


  it 'checks JS native objects', fn:
    expect
      1 in new Set, [1, 2, 3]
      to_equal
        true

    expect
      'foo' in new Map, [['foo', 'bar']]
      to_equal
        true

    expect
      1 in js_iter [1, 2, 3]
      to_equal
        true

    expect
      4 in js_iter [1, 2, 3]
      to_equal
        false

    expect
      'foo' in null
      to_equal
        false

    expect
      'foo' in undefined
      to_equal
        false
